import requests
import pandas as pd
from datetime import datetime
import smtplib
from email.mime.text import MIMEText

# 🔐 CONFIG SECTION — replace with your actual info
API_KEY = "your_openweather_api_key"
EMAIL_ADDRESS = "your_email@example.com"
EMAIL_PASSWORD = "your_email_password"
RECEIVER_EMAIL = "receiver_email@example.com"
CITY = "Helsinki"  # You can change the city

# 🌤 Fetch weather data from OpenWeatherMap API
def fetch_weather_data(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        weather_data = {
            "City": data["name"],
            "Temperature": data["main"]["temp"],
            "Weather": data["weather"][0]["description"],
            "Humidity": data["main"]["humidity"],
            "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return weather_data
    else:
        print(f"❌ Failed to fetch weather data. Status code: {response.status_code}")
        print(f"Response: {response.text}")
        return None

# 📊 Process and prepare the data
def process_data(data):
    if data:
        df = pd.DataFrame([data])
        return df
    return None

# 💾 Save data to Excel
def save_to_excel(df, filename="weather_report.xlsx"):
    df.to_excel(filename, index=False)
    print(f"✅ Weather data saved to {filename}")

# 📧 Send email notification
def send_email(city, temp):
    subject = f"Weather Report for {city}"
    body = f"The current temperature in {city} is {temp}°C.\n\nReport generated by WeatherBot."

    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = RECEIVER_EMAIL

    try:
        server = smtplib.SMTP("smtp.office365.com", 587)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.sendmail(EMAIL_ADDRESS, RECEIVER_EMAIL, msg.as_string())
        server.quit()
        print("📧 Email sent successfully!")
    except Exception as e:
        print(f"❌ Failed to send email: {e}")

# ▶️ Run the full robot
def main():
    print("🤖 Running WeatherBot...")

    data = fetch_weather_data(CITY)
    if not data:
        print("⚠️ WeatherBot stopped due to data fetch error.")
        return

    df = process_data(data)
    if df is not None:
        save_to_excel(df)
        send_email(data["City"], data["Temperature"])
    else:
        print("⚠️ No data to process or save.")

if __name__ == "__main__":
    main()
